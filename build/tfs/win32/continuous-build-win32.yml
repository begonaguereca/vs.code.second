steps:
- task: NodeTool@0
  inputs:
    versionSpec: "8.12.0"
- task: UsePythonVersion@0
  inputs:
    versionSpec: '2.x'
    addToPath: true
- bash: |
    export PATH="/D/a/1/s/build/yarn-custom/bin:$PATH"
    printf -- ""\\n--install.pre-fetch-script" "\"node" "D:\\a\\1\\s\\build\\cloud-spool\\cli.js" "retrieve" "-f" "./yarn.lock\""" >> /D/a/1/s/.yarnrc
    printf -- ""\\n--install.post-install-script" "\"node" "D:\\a\\1\\s\\build\\cloud-spool\\cli.js" "cache" "./node_modules" "-f" "./yarn.lock\""" >> /D/a/1/s/.yarnrc
    cat /D/a/1/s/.yarnrc
    yarn install
  displayName: Install Dependencies
- powershell: |
    yarn gulp electron
  displayName: Download Electron
- powershell: |
    yarn gulp hygiene
  displayName: Run Hygiene Checks
- powershell: |
    yarn monaco-compile-check
  displayName: Run Monaco Editor Checks
- powershell: |
    yarn compile
  displayName: Compile Sources
- powershell: |
    yarn download-builtin-extensions
  displayName: Download Built-in Extensions
- powershell: |
    .\scripts\test.bat --tfs "Unit Tests"
  displayName: Run Unit Tests
- powershell: |
    .\scripts\test-integration.bat --tfs "Integration Tests"
  displayName: Run Integration Tests
- powershell: |
    yarn smoketest --screenshots "$(Build.ArtifactStagingDirectory)\artifacts" --log "$(Build.ArtifactStagingDirectory)\artifacts\smoketest.log"
  displayName: Run Smoke Tests
  continueOnError: true
- task: PublishBuildArtifacts@1
  displayName: Publish Smoketest Artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/artifacts'
    ArtifactName: build-artifacts-win32
    publishLocation: Container
  condition: eq(variables['System.PullRequest.IsFork'], 'False')
- task: PublishTestResults@2
  displayName: Publish Tests Results
  inputs:
    testResultsFiles: '*-results.xml'
    searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
  condition: succeededOrFailed()
